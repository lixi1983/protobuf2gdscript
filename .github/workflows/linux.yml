name: Linux CI/CD

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  BIN_DIR: bin
  GODOT_VERSION: 4.3
  GODOT_RELEASE_NAME: 4.3-stable
  PLATFORM: linux

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        python -m pip install --upgrade pip
        pip install pyinstaller protobuf pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Download and setup Godot
      run: |
        wget https://github.com/godotengine/godot/releases/download/${{ env.GODOT_RELEASE_NAME }}/Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64.zip
        unzip Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64.zip
        mv Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64 godot
        chmod +x godot
        sudo mv godot /usr/local/bin/

    - name: Verify Godot installation
      run: |
        godot --version

    - name: Add BIN_DIR to PATH
      run: |
        echo "${{ github.workspace }}/${{ env.BIN_DIR }}" >> $GITHUB_PATH
        echo "Added ${{ github.workspace }}/${{ env.BIN_DIR }} to PATH"

    - name: Build Linux executable
      run: |
        make dist-linux
        chmod +x ${{ env.BIN_DIR }}/protoc-gen-gdscript

    - name: Run tests
      run: |
        which protoc
        which protoc-gen-gdscript
        which godot
        make test

    - name: Create release package
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        PACKAGE_NAME="protoc-gen-gdscript-${{ env.PLATFORM }}-${VERSION}"
        mkdir -p ${PACKAGE_NAME}
        cp -r ${{ env.BIN_DIR }} ${PACKAGE_NAME}/
        cp -r protobuf ${PACKAGE_NAME}/
        zip -r ${PACKAGE_NAME}.zip ${PACKAGE_NAME}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: protoc-gen-gdscript-${{ env.PLATFORM }}
        path: protoc-gen-gdscript-${{ env.PLATFORM }}-*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v3

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/protoc-gen-gdscript-${{ env.PLATFORM }}/*.zip
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
