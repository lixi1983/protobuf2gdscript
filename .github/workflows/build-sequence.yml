name: Build Sequence

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  actions: write
  contents: write

jobs:
  build-sequence:
    name: Build All Platforms
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ "${{ github.event.inputs.version }}" != "" ]]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION="main"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Run Linux build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting Linux build..."
          gh workflow run linux.yml -f version=${{ steps.get_version.outputs.version }}
          
          # 等待工作流启动
          sleep 5
          
          # 获取最新运行的 ID
          RUN_ID=$(gh run list --workflow=linux.yml --limit=1 --json databaseId --jq '.[0].databaseId')
          echo "Linux build run ID: ${RUN_ID}"
          
          # 等待工作流完成
          gh run watch ${RUN_ID}

      - name: Run macOS build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting macOS build..."
          gh workflow run macos.yml -f version=${{ steps.get_version.outputs.version }}
          
          # 等待工作流启动
          sleep 5
          
          # 获取最新运行的 ID
          RUN_ID=$(gh run list --workflow=macos.yml --limit=1 --json databaseId --jq '.[0].databaseId')
          echo "macOS build run ID: ${RUN_ID}"
          
          # 等待工作流完成
          gh run watch ${RUN_ID}

      - name: Run Windows build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting Windows build..."
          gh workflow run windows.yml -f version=${{ steps.get_version.outputs.version }}
          
          # 等待工作流启动
          sleep 5
          
          # 获取最新运行的 ID
          RUN_ID=$(gh run list --workflow=windows.yml --limit=1 --json databaseId --jq '.[0].databaseId')
          echo "Windows build run ID: ${RUN_ID}"
          
          # 等待工作流完成
          gh run watch ${RUN_ID}

      - name: Run Godot Plugin build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting Godot Plugin build..."
          gh workflow run godot_plugin.yml -f version=${{ steps.get_version.outputs.version }}
          
          # 等待工作流启动
          sleep 5
          
          # 获取最新运行的 ID
          RUN_ID=$(gh run list --workflow=godot_plugin.yml --limit=1 --json databaseId --jq '.[0].databaseId')
          echo "Godot Plugin build run ID: ${RUN_ID}"
          
          # 等待工作流完成
          gh run watch ${RUN_ID}

  cleanup:
#    needs: [godot-plugin]
    name: cleanup
    needs: [build-sequence]
    runs-on: ubuntu-latest
    if: always()  # 即使其他作业失败也运行
    permissions:
      actions: write  # 需要此权限来删除工作流运行记录        

    steps:
      - name: Cleanup old workflow runs
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            --method DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/runs \
            -f per_page=100 \
            -f created=">$(date -d '5 days ago' '+%Y-%m-%d')"
