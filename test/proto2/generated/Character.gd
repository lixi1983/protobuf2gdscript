# Generated by protoc-gen-gdscript. DO NOT EDIT!
extends RefCounted

class_name Character

var Inventory = preload("Character_Inventory.gd")
var Item = preload("Character_Item.gd")

enum CharacterClass {
    WARRIOR = 0,
    MAGE = 1,
    ROGUE = 2,
}

var name: String
var level: int = 1
var health: float = 100
var class: int = 0
var skills: Array[String]
var inventory: Dictionary

func _init():
    pass

func serialize() -> PackedByteArray:
    var bytes = PackedByteArray()
    if name != null:
        bytes.append_array(encode_varint(8))
        bytes.append_array(encode_value(name))
    if level != null:
        bytes.append_array(encode_varint(16))
        bytes.append_array(encode_value(level))
    if health != null:
        bytes.append_array(encode_varint(24))
        bytes.append_array(encode_value(health))
    if class != null:
        bytes.append_array(encode_varint(32))
        bytes.append_array(encode_value(class))
    if skills != null:
        for item in skills:
            bytes.append_array(encode_varint(40))
            bytes.append_array(encode_value(item))
    if inventory != null:
        bytes.append_array(encode_varint(48))
        bytes.append_array(encode_value(inventory))
    return bytes

static func encode_value(value) -> PackedByteArray:
    if value is int:
        return encode_varint(value)
    elif value is String:
        return encode_string(value)
    elif value is PackedByteArray:
        return encode_bytes(value)
    elif value is bool:
        return encode_varint(1 if value else 0)
    elif value is float:
        return encode_float(value)
    else:
        return value.serialize()

static func encode_bytes(value: PackedByteArray) -> PackedByteArray:
    var length = encode_varint(value.size())
    length.append_array(value)
    return length

static func encode_float(value: float) -> PackedByteArray:
    var bytes = PackedByteArray()
    bytes.resize(8)
    bytes.encode_float(0, value)
    return bytes

static func encode_varint(value: int) -> PackedByteArray:
    var bytes = PackedByteArray()
    while value > 0:
        var byte = value & 0x7F
        value = value >> 7
        if value:
            byte |= 0x80
        bytes.append(byte)
    return bytes

static func encode_string(value: String) -> PackedByteArray:
    var bytes = value.to_utf8_buffer()
    var length = encode_varint(bytes.size())
    length.append_array(bytes)
    return length

static func encode_length_delimited(value: PackedByteArray) -> PackedByteArray:
    var length = encode_varint(value.size())
    length.append_array(value)
    return length

