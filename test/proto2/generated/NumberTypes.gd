# Generated by protoc-gen-gdscript. DO NOT EDIT!
extends RefCounted

class_name NumberTypes

var int32_field: int = -42
var int64_field: int = -9223372036854775808
var uint32_field: int = 4294967295
var uint64_field: int = 18446744073709551615
var sint32_field: int = -2147483648
var sint64_field: int = -9223372036854775808
var fixed32_field: int = 4294967295
var fixed64_field: int = 18446744073709551615
var sfixed32_field: int = -2147483648
var sfixed64_field: int = -9223372036854775808
var float_field: float = 3.40282347e+38
var double_field: float = 2.2250738585072014e-308

func _init():
    pass

func serialize() -> PackedByteArray:
    var bytes = PackedByteArray()
    if int32_field != null:
        bytes.append_array(encode_varint(8))
        bytes.append_array(encode_value(int32_field))
    if int64_field != null:
        bytes.append_array(encode_varint(16))
        bytes.append_array(encode_value(int64_field))
    if uint32_field != null:
        bytes.append_array(encode_varint(24))
        bytes.append_array(encode_value(uint32_field))
    if uint64_field != null:
        bytes.append_array(encode_varint(32))
        bytes.append_array(encode_value(uint64_field))
    if sint32_field != null:
        bytes.append_array(encode_varint(40))
        bytes.append_array(encode_value(sint32_field))
    if sint64_field != null:
        bytes.append_array(encode_varint(48))
        bytes.append_array(encode_value(sint64_field))
    if fixed32_field != null:
        bytes.append_array(encode_varint(56))
        bytes.append_array(encode_value(fixed32_field))
    if fixed64_field != null:
        bytes.append_array(encode_varint(64))
        bytes.append_array(encode_value(fixed64_field))
    if sfixed32_field != null:
        bytes.append_array(encode_varint(72))
        bytes.append_array(encode_value(sfixed32_field))
    if sfixed64_field != null:
        bytes.append_array(encode_varint(80))
        bytes.append_array(encode_value(sfixed64_field))
    if float_field != null:
        bytes.append_array(encode_varint(88))
        bytes.append_array(encode_value(float_field))
    if double_field != null:
        bytes.append_array(encode_varint(96))
        bytes.append_array(encode_value(double_field))
    return bytes

static func encode_value(value) -> PackedByteArray:
    if value is int:
        return encode_varint(value)
    elif value is String:
        return encode_string(value)
    elif value is PackedByteArray:
        return encode_bytes(value)
    elif value is bool:
        return encode_varint(1 if value else 0)
    elif value is float:
        return encode_float(value)
    else:
        return value.serialize()

static func encode_bytes(value: PackedByteArray) -> PackedByteArray:
    var length = encode_varint(value.size())
    length.append_array(value)
    return length

static func encode_float(value: float) -> PackedByteArray:
    var bytes = PackedByteArray()
    bytes.resize(8)
    bytes.encode_float(0, value)
    return bytes

static func encode_varint(value: int) -> PackedByteArray:
    var bytes = PackedByteArray()
    while value > 0:
        var byte = value & 0x7F
        value = value >> 7
        if value:
            byte |= 0x80
        bytes.append(byte)
    return bytes

static func encode_string(value: String) -> PackedByteArray:
    var bytes = value.to_utf8_buffer()
    var length = encode_varint(bytes.size())
    length.append_array(bytes)
    return length

static func encode_length_delimited(value: PackedByteArray) -> PackedByteArray:
    var length = encode_varint(value.size())
    length.append_array(value)
    return length

