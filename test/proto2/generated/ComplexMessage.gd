# Generated by protoc-gen-gdscript. DO NOT EDIT!
extends RefCounted

class_name ComplexMessage

var NestedMessage = preload("ComplexMessage_NestedMessage.gd")

enum Status {
    UNKNOWN = 0,
    ACTIVE = 1,
    INACTIVE = 2,
    PENDING = 3,
}

# oneof test_oneof
var test_oneof_case = 0
var name: String
var id: int
var message: Dictionary

var int_field: int
var long_field: int = 1000000
var bool_field: bool = true
var float_field: float = 3.14
var string_field: String = "hello"
var bytes_field: PackedByteArray
var status: int = 0
var nested_messages: Array[Dictionary]
var status_list: Array[int]

func _init():
    pass

func serialize() -> PackedByteArray:
    var bytes = PackedByteArray()
    # Serialize oneof test_oneof
    match test_oneof_case:
        1:  # name
            bytes.append_array(encode_value(name))
        2:  # id
            bytes.append_array(encode_value(id))
        3:  # message
            if message != null:
                bytes.append_array(message.serialize())
    if int_field != null:
        bytes.append_array(encode_varint(8))
        bytes.append_array(encode_value(int_field))
    if long_field != null:
        bytes.append_array(encode_varint(16))
        bytes.append_array(encode_value(long_field))
    if bool_field != null:
        bytes.append_array(encode_varint(24))
        bytes.append_array(encode_value(bool_field))
    if float_field != null:
        bytes.append_array(encode_varint(32))
        bytes.append_array(encode_value(float_field))
    if string_field != null:
        bytes.append_array(encode_varint(40))
        bytes.append_array(encode_value(string_field))
    if bytes_field != null:
        bytes.append_array(encode_varint(48))
        bytes.append_array(encode_value(bytes_field))
    if status != null:
        bytes.append_array(encode_varint(56))
        bytes.append_array(encode_value(status))
    if nested_messages != null:
        for item in nested_messages:
            bytes.append_array(encode_varint(64))
            bytes.append_array(encode_value(item))
    if status_list != null:
        for item in status_list:
            bytes.append_array(encode_varint(112))
            bytes.append_array(encode_value(item))
    return bytes

static func encode_value(value) -> PackedByteArray:
    if value is int:
        return encode_varint(value)
    elif value is String:
        return encode_string(value)
    elif value is PackedByteArray:
        return encode_bytes(value)
    elif value is bool:
        return encode_varint(1 if value else 0)
    elif value is float:
        return encode_float(value)
    else:
        return value.serialize()

static func encode_bytes(value: PackedByteArray) -> PackedByteArray:
    var length = encode_varint(value.size())
    length.append_array(value)
    return length

static func encode_float(value: float) -> PackedByteArray:
    var bytes = PackedByteArray()
    bytes.resize(8)
    bytes.encode_float(0, value)
    return bytes

static func encode_varint(value: int) -> PackedByteArray:
    var bytes = PackedByteArray()
    while value > 0:
        var byte = value & 0x7F
        value = value >> 7
        if value:
            byte |= 0x80
        bytes.append(byte)
    return bytes

static func encode_string(value: String) -> PackedByteArray:
    var bytes = value.to_utf8_buffer()
    var length = encode_varint(bytes.size())
    length.append_array(bytes)
    return length

static func encode_length_delimited(value: PackedByteArray) -> PackedByteArray:
    var length = encode_varint(value.size())
    length.append_array(value)
    return length

