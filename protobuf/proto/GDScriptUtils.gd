# Generated by proto-gen-gdscript. DO NOT EDIT!

class_name GDScriptUtils extends RefCounted

const Message = preload("./Message.gd")
const FieldDescriptor = preload("./FieldDescriptor.gd")

static var VALUE_KEY = "value"
static var SIZE_KEY = "size"

static func encode_bool(bytes: PackedByteArray, value: bool)  :
    var s = bytes.size()
    bytes.resize(s + 1)
    bytes.encode_u8(s, 1 if value else 0)

static func decode_bool(bytes: PackedByteArray, offset: int, msg: Message = null) -> Dictionary:
    var value = bytes.decode_u8(offset)
    return {VALUE_KEY: true if value == 1 else false, SIZE_KEY: 1}

static func encode_int32(bytes: PackedByteArray, value: int) :
    var s = bytes.size()
    bytes.resize(s + 4)
    bytes.encode_s32(s, value)
    return bytes

static func decode_int32(bytes: PackedByteArray, offset: int, msg: Message = null) -> Dictionary:
    var value = bytes.decode_s32(offset)
    return {VALUE_KEY: value, SIZE_KEY: 4}

static func encode_int64(bytes: PackedByteArray, value: int) :
    var s = bytes.size()
    bytes.resize(s + 8)
    bytes.encode_s64(s, value)
    return bytes

static func decode_int64(bytes: PackedByteArray, offset: int, msg: Message = null) -> Dictionary:
    var value = bytes.decode_s64(offset)
    return {VALUE_KEY: value, SIZE_KEY: 8}

static func encode_varint( bytes: PackedByteArray, value: int) :
    while value > 0x7F:
#        bytes.resize(bytes.size() + 1)
        var b = (value & 0x7F) | 0x80
       # bytes.append((value & 0x7F) | 0x80)
        bytes.append(b)
        value = value >> 7

    bytes.append(value & 0x7F)

static func decode_varint(bytes: PackedByteArray, offset: int, msg: Message = null) -> Dictionary:
    var value = 0
    var shift = 0
    var pos = 0

    while ( offset + pos ) < bytes.size():
        var byte = bytes[offset + pos]
        value |= (byte & 0x7F) << shift
        pos += 1
        if (byte & 0x80) == 0:
            break
        shift += 7

    return {VALUE_KEY: value, SIZE_KEY: pos}

static func varint_size(bytes: PackedByteArray, offset: int) -> int:
    var size = 0
    var pos = offset
    while pos < bytes.size():
        size += 1
        if (bytes[pos] & 0x80) == 0:
            break
        pos += 1
    return size


static func encode_float(bytes: PackedByteArray, value: float) :
    var s = bytes.size()
    bytes.resize(s + 4)
    bytes.encode_float(s, value)
    return bytes

static func decode_float(bytes: PackedByteArray, offset: int, msg: Message = null) -> Dictionary:
    var value = bytes.decode_float(offset)
    return {VALUE_KEY: value, SIZE_KEY: 4}

static func encode_double(bytes: PackedByteArray, value: float) :
    var s = bytes.size()
    bytes.resize(s + 8)
    bytes.encode_double(s, value)
    return bytes

static func decode_double(bytes: PackedByteArray, offset: int, msg: Message = null) -> Dictionary:
    var value = bytes.decode_double(offset)
    return {VALUE_KEY: value, SIZE_KEY: 8}

static func encode_string(bytes: PackedByteArray, value: String):
    var utf8_value = value.to_utf8_buffer()
    var size = utf8_value.size()
    encode_varint(bytes, size)
#    bytes.resize(bytes.size() + size)
    bytes.append_array(utf8_value)


static func decode_string(bytes: PackedByteArray, offset: int, msg: Message = null) -> Dictionary:
    var info = decode_varint(bytes, offset)
    var size = info[VALUE_KEY]
    var size_len = info[SIZE_KEY]

    var str_bytes = bytes.slice(offset + size_len, offset + size_len + size)
    var value = str_bytes.get_string_from_utf8()

    return {VALUE_KEY: value, SIZE_KEY: size_len + size}

static func encode_bytes(bytes: PackedByteArray, value: PackedByteArray):
    var size = value.size()
    encode_varint(bytes, size)
    bytes.resize(bytes.size() + value.size())
    bytes.append_array(value)

static func decode_bytes(bytes: PackedByteArray, offset: int, msg: Message = null) -> Dictionary:
    var info = decode_varint(bytes, offset)
    var value_len = info[VALUE_KEY]
    var size = info[SIZE_KEY]
    var value = bytes.slice(offset + size, offset + size + value_len)
    return {VALUE_KEY: value, SIZE_KEY: value_len + size}

static func encode_message(bytes: PackedByteArray, value: Message):
    var msg_bytes = value.SerializeToBytes()
    var size = msg_bytes.size()
    encode_varint(bytes, size)
    bytes.append_array(msg_bytes)

static func decode_message(bytes: PackedByteArray, offset: int, msg: Message = null) -> Dictionary:
    if msg == null:
        return {VALUE_KEY: null, SIZE_KEY: 0}

    var tag = decode_varint(bytes, offset)
    var tag_size = tag[SIZE_KEY]
    var msg_size = tag[VALUE_KEY]

    if offset + tag_size + msg_size > bytes.size():
        return {VALUE_KEY: msg, SIZE_KEY: offset + tag_size}

    var msg_bytes = bytes.slice(offset + tag_size, offset + tag_size + msg_size)
    var pos = msg.ParseFromBytes(msg_bytes)
    return {VALUE_KEY: msg, SIZE_KEY: pos + tag_size}

static func decode_tag(bytes: PackedByteArray, offset: int, msg: Message = null) -> Dictionary:
    var value = decode_varint(bytes, offset)
    var v = value[VALUE_KEY]
    var tag = v >> 3
    value[VALUE_KEY] = tag
    return value

static func encode_tag(bytes: PackedByteArray, tag: int, field_type: int):
    var wire_type = FieldDescriptor.get_wire_type(field_type)
    var value = (tag << 3) | wire_type
    encode_varint(bytes, value)

static func encode_zigzag32(bytes: PackedByteArray, value: int):
    var zv = (value << 1) ^ (value >> 31)
    encode_varint(bytes, zv)

static func decode_zigzag32(bytes: PackedByteArray, offset: int, msg: Message = null) -> Dictionary:
    var value_d = decode_varint(bytes, offset, msg )
    var value = value_d[VALUE_KEY]
    value = (value >> 1) ^ -(value & 1)
    return {VALUE_KEY: value, SIZE_KEY: value_d[SIZE_KEY]}


static func encode_zigzag64(bytes: PackedByteArray, value: int) :
    print("zig64 value: ", value)
    var zv = (value << 1) ^ (value >> 63)
    print("zv value: ", zv)
    encode_varint(bytes, zv)

static func decode_zigzag64(bytes: PackedByteArray, offset: int, msg: Message = null) -> Dictionary:
#    return (value >> 1) ^ -(value & 1)
    var value_d = decode_varint(bytes, offset, msg )
#    var value_d = decode_int64(bytes, offset, msg )
    var value = value_d[VALUE_KEY]
    value = (value >> 1) ^ -(value & 1)
    return {VALUE_KEY: value, SIZE_KEY: value_d[SIZE_KEY]}

