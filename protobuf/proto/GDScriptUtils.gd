# Generated by proto-gen-gdscript. DO NOT EDIT!

class_name GDScriptUtils extends RefCounted

static var VALUE_KEY = "value"
static var SIZE_KEY = "size"

static func encode_bool(bytes: PackedByteArray, value: bool)  :
    var s = bytes.size()
    bytes.resize(s + 1)
    bytes.encode_u8(s, 1 if value else 0)

static func decode_bool(bytes: PackedByteArray, offset: int) -> Dictionary:
    var value = bytes.decode_u8(offset)
    return {VALUE_KEY: true if value == 1 else false, SIZE_KEY: 1}

static func encode_varint( bytes: PackedByteArray, value: int) :
    while value > 0x7F:
#        bytes.resize(bytes.size() + 1)
        var b = (value & 0x7F) | 0x80
       # bytes.append((value & 0x7F) | 0x80)
        bytes.append(b)
        value = value >> 7

#    bytes.resize(bytes.size() + 1)
    bytes.append(value)

static func decode_varint(bytes: PackedByteArray, offset: int) -> Dictionary:
    var value = 0
    var shift = 0
    var pos = 0

    while ( offset + pos ) < bytes.size():
        var byte = bytes[offset + pos]
        value |= (byte & 0x7F) << shift
        pos += 1
        if (byte & 0x80) == 0:
            break
        shift += 7

    return {VALUE_KEY: value, SIZE_KEY: pos}

static func varint_size(bytes: PackedByteArray, offset: int) -> int:
    var size = 0
    var pos = offset
    while pos < bytes.size():
        size += 1
        if (bytes[pos] & 0x80) == 0:
            break
        pos += 1
    return size


static func encode_float(bytes: PackedByteArray, value: float) :
    var s = bytes.size()
    bytes.resize(s + 4)
    bytes.encode_float(s, value)
    return bytes

static func decode_float(bytes: PackedByteArray, offset: int) -> Dictionary:
    var value = bytes.decode_float(offset)
    return {VALUE_KEY: value, SIZE_KEY: 4}

static func encode_string(bytes: PackedByteArray, value: String):
    var utf8_value = value.to_utf8_buffer()
    var size = utf8_value.size()
    encode_varint(bytes, size)
#    bytes.resize(bytes.size() + size)
    bytes.append_array(utf8_value)


static func decode_string(bytes: PackedByteArray, offset: int) -> Dictionary:
    var info = decode_varint(bytes, offset)
    var size = info[VALUE_KEY]
    var size_len = info[SIZE_KEY]

    var str_bytes = bytes.slice(offset + size_len, offset + size_len + size)
    var value = str_bytes.get_string_from_utf8()
    return {VALUE_KEY: value, SIZE_KEY: size_len + size}

static func encode_bytes(bytes: PackedByteArray, value: PackedByteArray):
    var size = value.size()
    encode_varint(bytes, size)
    bytes.resize(bytes.size() + value.size())
    bytes.append_array(value)

static func decode_bytes(bytes: PackedByteArray, offset: int) -> Dictionary:
    var info = decode_varint(bytes, offset)
    var value_len = info[VALUE_KEY]
    var size = info[SIZE_KEY]
    var value = bytes.slice(offset + size, offset + size + value_len)
    return {VALUE_KEY: value, SIZE_KEY: value_len + size}

static func decode_tag(bytes: PackedByteArray, offset: int) -> Dictionary:
    return decode_varint(bytes, offset)

static func encode_tag(bytes: PackedByteArray, value: int):
    encode_varint(bytes, value)
